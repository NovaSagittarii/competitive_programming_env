{
	// Place your ccc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"common rep": {
		"scope": "cpp",
		"prefix": "common/rep",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; $2 < ${3:n}; ++$2) {",
			"\t$0",
			"}",
		],
		"description": "For loop",
	},
	"common all": {
		"scope": "cpp",
		"prefix": "common/all",
		"body": [
			"${1:a}.begin(), $1.end()$0",
		],
	},
	"common sort (ascending)": {
		"scope": "cpp",
		"prefix": "common/sort",
		"body": [
			"std::sort(${1:a}.begin(), $1.end());",
			"$0",
		],
	},
	"common sort (descending)": {
		"scope": "cpp",
		"prefix": "common/rsort",
		"body": [
			"std::sort(${1:a}.rbegin(), $1.rend());",
			"$0",
		],
	},
	"common reverse": {
		"scope": "cpp",
		"prefix": "common/reverse",
		"body": [
			"std::reverse(${1:a}.begin(), $1.end());",
			"$0",
		],
	},
	"common max/min element": {
		"scope": "cpp",
		"prefix": "common/minmax",
		"body": [
			"auto ${1/minmax/[min, max]/g} = *std::${1|max,min,minmax|}_element(${2:a}.begin(), $2.end());",
			"$0",
		],
		"description": "if you pick minmax, need to remove the * since it returns pair",
	},

	// "dp"
	"common prefix_sum binary_operation": {
		"scope": "cpp",
		"prefix": "common/prefixsum",
		"body": [
			"vi ${1:ps}(${2:a}.size()+1); // $1[i] = [0, i)",
			"for (int i = 0; i < $2.size(); ++i) $1[i+1] = $1[i] ${3|+,^,*|} $2[i];",
			"$0",
		],
	},
	"common suffix_sum binary_operation": {
		"scope": "cpp",
		"prefix": "common/suffixsum",
		"body": [
			"vi ${1:ss}(${2:a}.size()+1); // $1[i] = [i, n)",
			"for (int i = 0; i < $2.size(); ++i) $1[i] = $1[i+1] ${3|+,^,*|} $2[i];",
			"$0",
		],
	},
	"common prefix_sum function": {
		"scope": "cpp",
		"prefix": "common/prefixsum-function",
		"body": [
			"vi ${1:ps}(${2:a}.size()+1); // $1[i] = [0, i)",
			"for (int i = 0; i < $2.size(); ++i) $1[i+1] = ${3|std::max,std::min|}($1[i], $2[i]);",
			"$0",
		],
	},
	"common suffix_sum function": {
		"scope": "cpp",
		"prefix": "common/suffixsum-function",
		"body": [
			"vi ${1:ss}(${2:a}.size()+1); // $1[i] = [i, n)",
			"for (int i = 0; i < $2.size(); ++i) $1[i] = ${3|std::max,std::min|}($1[i], $2[i]);",
			"$0",
		],
	},

	// binary search
	"common binary_search": {
		"scope": "cpp",
		"prefix": "common/binary_search",
		"body": [
			"int lmid = -1;",
			"for (${1:int} lo = ${2:0}, hi = ${3:1e9}, mid; lo <= hi;) {",
			"\tmid = lo + (hi - lo) / 2;",
			"\tbool ok = true;",
			"${4:\t/* max */ if (ok) lo = (lmid = mid) + 1;\n\telse hi = mid - 1;}",
			"${5:\t/* min */ if (ok) hi = (lmid = mid) - 1;\n\telse lo = mid + 1;}",
			"}",
		],
	},

	// graphs
	"common dfs tree": {
		"scope": "cpp",
		"prefix": "common/graph/dfs-tree",
		"body": [
			"auto ${1:dfs} = [&](int u, int prev, auto&& dfs) -> ${2:void} {",
			"\tfor (auto v : ${3:adj}[u]) {",
			"\t\tif (v == prev) continue;",
			"\t\tdfs(v, u, dfs);",
			"\t\t$0",
			"\t}",
			"};",
			"$1(0, -1, $1);",
		],
	},
	"common bfs": {
		"scope": "cpp",
		"prefix": "common/graph/bfs",
		"body": [
			"std::queue<${1:int}> q;",
			"q.push(${2:s});",
			"vi dist(${3:adj}.size(), -1);",
			"for (int depth = 0; !q.empty(); ++depth) {",
			"\tint qn = q.size();",
			"\twhile (qn--) {",
			"\t\tauto u = q.front();",
			"\t\tq.pop();",
			"\t\tif (dist[u] != -1) continue;",
			"\t\tdist[u] = depth;",
			"\t\tif (${4:u == t}) {",
			"\t\t\t// depth=mindist",
			"\t\t\twhile (!q.empty()) q.pop();",
			"\t\t\tbreak;",
			"\t\t}",
			"\t\tfor (auto v : $3[u]) {",
			"\t\t\tq.push(v);",
			"\t\t}",
			"\t}",
			"}",
		],
	},
	"common grid dij": {
		"scope": "cpp",
		"prefix": "common/graph/grid-nav",
		"body": [
			"for (auto [di, dj] : va(int, 2) {",
			"\t${1|/*adj */ {0\\,1}\\,{1\\,0}\\,{0\\,-1}\\,{-1\\,0},/*diag*/ {-1\\,1}\\,{1\\,-1}\\,{-1\\,-1}\\,{-1\\,-1},/*8way*/ {0\\,1}\\,{1\\,0}\\,{0\\,-1}\\,{-1\\,0}\\,{-1\\,1}\\,{1\\,-1}\\,{-1\\,-1}\\,{-1\\,-1}|}",
			"}) {",
			"\tint ni = i + di, nj = j + dj;",
			"\tif (ni < ${2:0} || ni >= ${3:n} || nj < ${4:0} || nj >= ${5:m}) continue;",
			"\t$0  // process ni nj",
			"}",
		],
	},
}
